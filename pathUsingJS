let grid = [
  [{ state: 'empty' }, { state: 'empty' }, { state: 'empty' }],
  [{ state: 'empty' }, { state: 'block' }, { state: 'goal' }],
];
let start = [0, 0];
let end = [1, 2];
let row = grid.length;
let col = grid[0].length;

//function to judge if a cell is safe or not
safeNeighbor = function (r, c) {
  if (r < 0 || r >= row) return false;
  if (c < 0 || c >= col) return false;
  if (grid[r][c].state == 'block') return false;
  
  return true;
};

//function to identify neighbors of current location
exploreLocation = function (location) {
  let r = location.r;
  let c = location.c;
  let allNeighbors = [];
  
  //left
  if (safeNeighbor(r, c - 1)) allNeighbors.push({ r: r, c: c - 1 });
  //right
  if (safeNeighbor(r, c + 1)) allNeighbors.push({ r: r, c: c + 1 });
  //top
  if (safeNeighbor(r - 1, c)) allNeighbors.push({ r: r - 1, c: c });
  //bottom
  if (safeNeighbor(r + 1, c)) allNeighbors.push({ r: r + 1, c: c });
  
  return allNeighbors;
};

//find path between two cells
findPath = function () {
  var location = {
    r: start[0],
    c: start[1],
  };
  var queue = [];
  queue.push(location);
  while (queue.length) {
    var currentLocation = queue.shift();
    if (currentLocation.r == end[0] && currentLocation.c == end[1])
      return currentLocation;
    grid[currentLocation.r][currentLocation.c].state = 'visited';
    var neighbors = exploreLocation(currentLocation);
    for(neighbor of neighbors)
    {
      if(grid[neighbor.r][neighbor.c].state != "visited")
      {
        queue.push(neighbor);
        grid[neighbor.r][neighbor.c]["parent"]=currentLocation;
      }
    }
   }
  return false;
};

//Code to traverse, and print path of route
printPath = function(path){
 let paths = [path];
 
 while(true){
   let r = path.r;
   let c = path.c;
   let parent = grid[r][c].parent;
   if(parent == undefined)
     break;
   paths.push(parent);
   path = {r:parent.r,c:parent.c};
 }
  console.log(paths)
}

let path = findPath()
printPath(path);
